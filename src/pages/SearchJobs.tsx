import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Separator } from '@/components/ui/separator';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Search, MapPin, Clock, Building, Filter, Heart, ExternalLink, X, ChevronDown } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface Job {
  id: string;
  title: string;
  company_name: string;
  location: string;
  employment_type: string;
  salary_min?: number;
  salary_max?: number;
  description: string;
  created_at: string;
}

const SearchJobs = () => {
  const [jobs, setJobs] = useState<Job[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [jobTitleSearch, setJobTitleSearch] = useState('');
  const [selectedLocation, setSelectedLocation] = useState('all-locations');
  const [selectedCategory, setSelectedCategory] = useState('all-categories');
  const [selectedSubcategory, setSelectedSubcategory] = useState('');
  const [selectedEmploymentType, setSelectedEmploymentType] = useState('all-types');

  // Job categories with subcategories - based on AF structure
  const jobCategories = [
    { 
      value: 'administration', 
      label: 'Administration, ekonomi, juridik', 
      icon: 'üìä',
      keywords: ['administration', 'ekonomi', 'redovisning', 'controller', 'assistent', 'sekreterare', 'koordinator', 'projektledare', 'juridik', 'advokat'],
      subcategories: [
        'Administrat√∂rer och sekreterare',
        'Apotekare m.fl.',
        'Arkivarier och bibliotekarier m.fl.',
        'Assistenter och administrat√∂rer',
        'Banktj√§nstem√§n och f√∂rs√§kringsr√•dgivare',
        'Controllers och analytiker',
        'Ekonomiassistenter och redovisningsekonomer', 
        'F√∂retagsledare',
        'Jurister',
        'L√∂ne- och personaladministrat√∂rer',
        'Projektledare',
        'Sekreterare och kontorspersonal',
        'Skatteexperter och redovisningskonsulter'
      ]
    },
    { 
      value: 'construction', 
      label: 'Bygg och anl√§ggning', 
      icon: 'üèóÔ∏è',
      keywords: ['bygg', 'snickare', 'elektriker', 'anl√§ggning', 'murare', 'm√•lare', 'byggledare', 'platschef', 'vvs'],
      subcategories: [
        'Anl√§ggningsarbetare',
        'Betongarbetare',
        'Byggarbetsledare',
        'Byggnadsingenj√∂rer och arkitekter',
        'Byggpl√•tslagare',
        'Byggnadsarbetare',
        'Elektriker',
        'Fasadarbetare', 
        'Glas- och f√∂nstermont√∂rer',
        'Golvl√§ggare',
        'Isoleringsmont√∂rer',
        'Kranf√∂rare',
        'M√•lare',
        'Murare',
        'Platts√§ttare',
        'R√∂rmokare och VVS-mont√∂rer',
        'Snickare',
        'Takl√§ggare',
        'V√§g- och anl√§ggningsarbetare'
      ]
    },
    { 
      value: 'management', 
      label: 'Chefer och verksamhetsledare', 
      icon: 'üëî',
      keywords: ['chef', 'ledare', 'verksamhet', 'director', 'manager', 'vd', 'platschef', 'avdelningschef'],
      subcategories: [
        'Administrationschefer',
        'Driftchefer inom industri',
        'Ekonomichefer',
        'Finanschefer',
        'F√∂rs√§ljnings- och marknadschefer',
        'HR-chefer',
        'IT-chefer',
        'Produktionschefer',
        'Projektchefer',
        'Restaurang- och hotellchefer',
        'S√§ljchefer',
        'Teknikchefer',
        'Utbildningschefer',
        'VD och koncernchefer',
        'Verksamhetschefer'
      ]
    },
    { 
      value: 'it', 
      label: 'Data/IT', 
      icon: 'üíª',
      keywords: ['utvecklare', 'programmerare', 'IT', 'data', 'systemadministrat√∂r', 'webb', 'mjukvara', 'frontend', 'backend', 'fullstack', 'devops', 'cybers√§kerhet'],
      subcategories: [
        'Applikationsutvecklare',
        'Business analysts',
        'Databasadministrat√∂rer',
        'DevOps-ingenj√∂rer',
        'Frontend-utvecklare',
        'Backend-utvecklare',
        'Fullstack-utvecklare',
        'IT-arkitekter',
        'IT-konsulter',
        'IT-projektledare',
        'IT-s√§kerhetsspecialister',
        'Mjukvaruingenj√∂rer',
        'N√§tverksadministrat√∂rer',
        'Systemadministrat√∂rer',
        'Systemanalytiker',
        'Testare och QA-specialister',
        'UX/UI-designers',
        'Webbutvecklare'
      ]
    },
    { 
      value: 'sales', 
      label: 'F√∂rs√§ljning, ink√∂p, marknadsf√∂ring', 
      icon: 'üìà',
      keywords: ['f√∂rs√§ljning', 'sales', 's√§ljare', 'account', 'marketing', 'marknadsf√∂ring', 'reklam', 'kommunikation', 'pr', 'ink√∂p'],
      subcategories: [
        'Account managers',
        'Butikss√§ljare',
        'Digital marknadsf√∂rare',
        'E-handelsspecialister',
        'Event- och m√§ssorganisat√∂rer',
        'F√∂rs√§ljningsrepresentanter',
        'Ink√∂pare',
        'Kommunikat√∂rer',
        'Kundansvariga',
        'Marknadsanalytiker',
        'Marknadsf√∂rare',
        'PR-specialister',
        'Reklamproducenter',
        'S√§ljare inom detaljhandel',
        'S√§ljchefer',
        'Telefonf√∂rs√§ljare'
      ]
    },
    { 
      value: 'crafts', 
      label: 'Hantverkyrken', 
      icon: 'üî®',
      keywords: ['hantverk', 'smed', 'keramiker', 'snickare', 'tr√§arbete', 'metallarbete'],
      subcategories: [
        'Barberare och fris√∂rer',
        'Bagare och konditorer',
        'B√•tbyggare',
        'Dekorat√∂rer och florister',
        'Finsnickar',
        'Glas- och keramikarbetare',
        'Guldsmed er',
        'Instrumentmakare',
        'Juvelerare',
        'Korgmakare',
        'K√∂tt- och fiskberedare',
        'L√§derhantverkare',
        'M√∂belsnickare',
        'Musikinstrumentmakare',
        'Optiker',
        'Silversmeder',
        'Slaktare',
        'Tr√§snidare',
        'Urmakare'
      ]
    },
    { 
      value: 'restaurant', 
      label: 'Hotell, restaurang, storhush√•ll', 
      icon: 'üçΩÔ∏è',
      keywords: ['kock', 'servit√∂r', 'hotell', 'restaurang', 'storhush√•ll', 'bagare', 'konditor', 'hovm√§stare'],
      subcategories: [
        'Bagare och konditorer',
        'Bartenders',
        'Cateringpersonal',
        'Hovm√§stare',
        'Hotellreceptionister',
        'Kockar',
        'K√∂kspersonal',
        'Restaurangchefer',
        'Servit√∂rer',
        'Sommelier',
        'Storhush√•llspersonal',
        'St√§dpersonal inom hotell'
      ]
    },
    { 
      value: 'healthcare', 
      label: 'H√§lso- och sjukv√•rd', 
      icon: 'üè•',
      keywords: ['sjuksk√∂terska', 'l√§kare', 'v√•rd', 'omsorg', 'tandl√§kare', 'fysioterapeut', 'undersk√∂terska', 'v√•rdbitr√§de'],
      subcategories: [
        'Ambulanspersonal',
        'Apotekstekniker',
        'Arbetsterapeuter',
        'Barnmorskor',
        'Biomedicinska analytiker',
        'Dietister',
        'Fysioterapeuter',
        'H√∂rselskadetekniker',
        'Kuratorer',
        'L√§kare',
        'Medicintekniker',
        'Naprapat er',
        'Optiker',
        'Ortopedtekniker',
        'R√∂ntgensjuksk√∂terskor',
        'Sjukgymnaster',
        'Sjuksk√∂terskor',
        'Tandhygienister',
        'Tandl√§kare',
        'Tandtekniker',
        'Undersk√∂terskor',
        'V√•rdbitr√§den'
      ]
    },
    { 
      value: 'industry', 
      label: 'Industriell tillverkning', 
      icon: 'üè≠',
      keywords: ['industri', 'tillverkning', 'produktion', 'maskinoperat√∂r', 'kvalitet', 'process', 'tekniker'],
      subcategories: [
        'Fordonsreparat√∂rer',
        'Gjutare och formgjutare',
        'Industriarbetare',
        'Kemitekniker',
        'Maskinoperat√∂rer',
        'Maskinreparat√∂rer',
        'Metallarbetare',
        'Monteringsarbetare',
        'Packare',
        'Plastarbetare',
        'Processtekniker',
        'Produktionsarbetare',
        'Kvalitetskon trollanter',
        'Svetsa re',
        'Textilarbetare',
        'Tr√§arbetare',
        'Verktygsm akare'
      ]
    },
    { 
      value: 'installation', 
      label: 'Installation, drift, underh√•ll', 
      icon: '‚öôÔ∏è',
      keywords: ['installation', 'drift', 'underh√•ll', 'reparat√∂r', 'tekniker', 'service'],
      subcategories: [
        'Anl√§ggningsreparat√∂rer',
        'Automationstekniker',
        'Drifttekn iker',
        'El- och teletekniker',
        'Fastighetssk √∂tare',
        'Fastighetstekniker',
        'Hissmont√∂rer',
        'HVAC-tekniker',
        'Industri elektriker',
        'Installations tekniker',
        'Kraftverkstekniker',
        'Kyltekn iker',
        'Maskinmont√∂rer',
        'Reparat√∂rer',
        'Servicetekniker',
        'Underh√•llstekniker',
        'Ventilationsmont√∂rer'
      ]
    },
    { 
      value: 'logistics', 
      label: 'Transport', 
      icon: 'üöõ',
      keywords: ['lager', 'logistik', 'transport', 'distribution', 'chauff√∂r', 'lastbil', 'gaffeltruck', 'leverans'],
      subcategories: [
        'Arbetsledare inom lager och terminal',
        'Bang√•rdspersonal', 
        'Brevb√§rare och postterminalarbetare',
        'Buss- och sp√•rvagnsf√∂rare',
        'Fartygsbef√§l m.fl.',
        'Flygledare',
        'Hamnarbetare',
        'Kabinpersonal m.fl.',
        'Lager- och terminalpersonal', 
        'Lastbilsf√∂rare m.fl.',
        'Lokf√∂rare',
        'Maskinbef√§l',
        'Matroser och jungman m.fl.',
        'Piloter m.fl.',
        'Ramppersonal, flyttkarlar och varup√•fyllare m.fl.',
        'Reklamutdelare och tidningsdistribut√∂rer',
        'Taxif√∂rare m.fl.',
        'Transportledare och transportsamordnare',
        'Truckf√∂rare',
        'T√•gv√§rdar och ombordansvariga m.fl.'
      ]
    },
    { 
      value: 'beauty', 
      label: 'Kropps- och sk√∂nhetsv√•rd', 
      icon: 'üíÑ',
      keywords: ['fris√∂r', 'sk√∂nhet', 'massage', 'naglar', 'kosmetolog'],
      subcategories: [
        'Barberare',
        'Fris√∂rer',
        'Hudterapeuter',
        'Kosmetologer',
        'Mass√∂rer',
        'Nageltekniker',
        'Sk√∂nhetsterapeuter'
      ]
    },
    { 
      value: 'creative', 
      label: 'Kultur, media, design', 
      icon: 'üé®',
      keywords: ['design', 'grafisk', 'kreativ', 'media', 'journalist', 'fotograf', 'video', 'kultur', 'konstn√§r'],
      subcategories: [
        'Artister och musiker',
        'Dansare och koreografer',
        'Designers',
        'Filmproducenter',
        'Fotografer',
        'Grafiska formgivare',
        'Illustrat√∂rer',
        'Journalister',
        'Konstn√§rer',
        'Kulturarrang√∂rer',
        'Ljudtekniker',
        'Museipersonal',
        'Redakt√∂rer',
        'Scentekniker',
        'Sk√•despelare',
        'Videoproducenter',
        'Webdesigners'
      ]
    },
    { 
      value: 'military', 
      label: 'Milit√§rt arbete', 
      icon: 'üéñÔ∏è',
      keywords: ['milit√§r', 'f√∂rsvar', 'soldat', 'officer'],
      subcategories: [
        'Bef√§l',
        'Gruppbef√§l',
        'Officerare',
        'Soldater',
        'Specialister'
      ]
    },
    { 
      value: 'agriculture', 
      label: 'Naturbruk', 
      icon: 'üåæ',
      keywords: ['lantbruk', 'jordbruk', 'skog', 'djur', 'tr√§dg√•rd'],
      subcategories: [
        'Djursk√∂tare',
        'Fiskare',
        'J√§gare',
        'Jordbruksarbetare',
        'Lantarbetare',
        'Skogsarbetare',
        'Tr√§dg√•rdsarbetare',
        'Veterin√§rer'
      ]
    },
    { 
      value: 'science', 
      label: 'Naturvetenskapligt arbete', 
      icon: 'üî¨',
      keywords: ['forskning', 'vetenskap', 'laboratorium', 'kemi', 'biologi'],
      subcategories: [
        'Biologer',
        'Forskare',
        'Fysiker',
        'Kemister',
        'Laboratorieassistenter',
        'Matematiker',
        'Meteorologer'
      ]
    },
    { 
      value: 'education', 
      label: 'Pedagogiskt arbete', 
      icon: 'üìö',
      keywords: ['l√§rare', 'utbildning', 'skola', 'universitet', 'f√∂rskola', 'pedagog', 'barnsk√∂tare', 'fritidsledare'],
      subcategories: [
        'Doktorander',
        'Elevassistenter m.fl.',
        'Forskarassistenter m.fl.',
        'Fritidspedagoger',
        'F√∂rskoll√§rare',
        'Grundskoll√§rare',
        'Gymnasiel√§rare',
        'Idrottsstr√§nare och instrukt√∂rer m.fl.',
        'L√§rare i yrkes√§mnen',
        'Professionella idrottut√∂vare',
        'Professorer',
        'Speciall√§rare och specialpedagoger m.fl.',
        'Studie- och yrkesv√§gledare',
        'Trafiklarare',
        'Universitets- och h√∂gskolelektorer',
        '√ñvriga pedagoger med teoretisk specialistkompetens',
        '√ñvriga universitets- och h√∂gskolel√§rare',
        '√ñvriga utbildare och instrukt√∂rer'
      ]
    },
    { 
      value: 'cleaning', 
      label: 'Sanering och renh√•llning', 
      icon: 'üßπ',
      keywords: ['st√§d', 'reng√∂ring', 'sanering', 'renh√•llning', 'lokalv√•rd', 'skorstensfejare'],
      subcategories: [
        'Bilrekonditionerare, f√∂nsterputsare m.fl.',
        'Renh√•llnings- och √•tervinningsarbetare',
        'Saneringsarbetare m.fl.',
        'Skorstensfjejare',
        'St√§dare',
        'St√§dledare och husfruar',
        '√ñvrig hemservicepersonal m.fl.'
      ]
    },
    { 
      value: 'social', 
      label: 'Socialt arbete', 
      icon: 'ü§ù',
      keywords: ['social', 'socialtj√§nst', 'st√∂d', 'hj√§lp', 'omsorg', 'kurator', 'behandling'],
      subcategories: [
        'Barnsk√∂tare',
        'Begravnings- och krematoriepersonal',
        'Behandlingsassistenter och socialpedagoger m.fl.',
        'Bist√•ndshandl√§ggare m.fl.',
        'Diakoner',
        'Friskv√•rdskonsulenter och h√§lsopedagoger m.fl.',
        'Fritidsledare m.fl.',
        'Kuratorer',
        'Pastorer m.fl.',
        'Personliga assistenter',
        'Pr√§ster',
        'Socialsekreterare',
        'V√•rdare, boendest√∂djare',
        '√ñvrig servicepersonal',
        '√ñvriga yrken inom socialt arbete'
      ]
    },
    { 
      value: 'security', 
      label: 'S√§kerhetsarbete', 
      icon: 'üõ°Ô∏è',
      keywords: ['s√§kerhet', 'vakt', 'polis', 'brandman', 'ordning', 'bevakning'],
      subcategories: [
        'Arbetsmilj√∂ingenj√∂rer, yrkes- och milj√∂hygieniker',
        'Brandingenj√∂rer och byggnadsinspekt√∂rer m.fl.',
        'Brandm√§n',
        'Kriminalv√•rdare',
        'Poliser',
        'SOS-operat√∂rer m.fl.',
        'S√§kerhetsinspekt√∂rer m.fl.',
        'Tull- och kustbevakningtj√§nstem√§n',
        'V√§ktare och ordningsvakter',
        '√ñvrig bevaknings- och s√§kerhetspersonal'
      ]
    },
    { 
      value: 'technical', 
      label: 'Tekniskt arbete', 
      icon: 'üîß',
      keywords: ['ingenj√∂r', 'tekniker', 'konstrukt√∂r', 'design', 'utveckling', 'arkitekt', 'civilingenj√∂r'],
      subcategories: [
        'Arkitekter m.fl.',
        'Civilingenj√∂rsyrken inom elektroteknik',
        'Civilingenj√∂rsyrken inom gruvteknik och metallurgi',
        'Civilingenj√∂rsyrken inom kemi och kemiteknik',
        'Civilingenj√∂rsyrken inom logistik och produktionsplanering',
        'Civilingenj√∂rsyrken inom maskinteknik',
        'Fastighetsf√∂rvaltare',
        'Flygtekniker',
        'GIS- och kartingenj√∂rer',
        'Ingenj√∂rer och tekniker inom elektroteknik',
        'Ingenj√∂rer och tekniker inom gruvteknik och metallurgi',
        'Ingenj√∂rer och tekniker inom industri, logistik och produktionsplanering',
        'Ingenj√∂rer och tekniker inom kemi och kemiteknik',
        'Ingenj√∂rer och tekniker inom maskinteknik',
        'Laboratorieingenj√∂rer',
        'Landskapsarkitekter',
        'Lantm√§tare',
        'Planeringsarkitekter m.fl.',
        'Tandtekniker och ortopedingenj√∂rer m.fl.',
        'Tekniker, bilddiagnostik och medicinteknisk utrustning',
        '√ñvriga civilingenj√∂rsyrken',
        '√ñvriga ingenj√∂rer och tekniker'
      ]
    }
  ];

  const locations = [
    'Stockholm', 'G√∂teborg', 'Malm√∂', 'Uppsala', 'V√§ster√•s', '√ñrebro', 
    'Link√∂ping', 'Helsingborg', 'J√∂nk√∂ping', 'Norrk√∂ping', 'Lund', 'Ume√•'
  ];

  const employmentTypes = [
    { value: 'Heltid', label: 'Heltid' },
    { value: 'Deltid', label: 'Deltid' },
    { value: 'Konsult', label: 'Konsultuppdrag' },
    { value: 'Praktik', label: 'Praktik' },
    { value: 'Tillf√§llig', label: 'Vikariat' }
  ];

  const fetchJobs = async () => {
    setLoading(true);
    try {
      let query = supabase
        .from('job_postings')
        .select(`
          *,
          profiles!job_postings_employer_id_fkey(company_name)
        `)
        .eq('is_active', true)
        .order('created_at', { ascending: false });

      // Apply search filters
      if (searchTerm) {
        query = query.or(`company_name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%`);
      }

      // Apply job title search
      if (jobTitleSearch) {
        query = query.ilike('title', `%${jobTitleSearch}%`);
      }

      // Apply subcategory filter (more specific than category)
      if (selectedSubcategory) {
        query = query.ilike('title', `%${selectedSubcategory}%`);
      } else if (selectedCategory && selectedCategory !== 'all-categories') {
        // Apply category filter only if no subcategory is selected
        const category = jobCategories.find(cat => cat.value === selectedCategory);
        if (category) {
          const keywordConditions = category.keywords.map(keyword => 
            `title.ilike.%${keyword}%,description.ilike.%${keyword}%`
          ).join(',');
          query = query.or(keywordConditions);
        }
      }

      if (selectedLocation && selectedLocation !== 'all-locations') {
        query = query.ilike('location', `%${selectedLocation}%`);
      }

      if (selectedEmploymentType && selectedEmploymentType !== 'all-types') {
        query = query.eq('employment_type', selectedEmploymentType);
      }

      const { data, error } = await query.limit(20);
      
      if (error) throw error;
      
      // Transform the data to match our Job interface
      const transformedJobs = (data || []).map(job => ({
        ...job,
        company_name: job.profiles?.company_name || 'Ok√§nt f√∂retag'
      }));
      
      setJobs(transformedJobs);
    } catch (error) {
      console.error('Error fetching jobs:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchJobs();
  }, [searchTerm, jobTitleSearch, selectedLocation, selectedCategory, selectedSubcategory, selectedEmploymentType]);

  const formatSalary = (min?: number, max?: number) => {
    if (min && max) {
      return `${min.toLocaleString()} - ${max.toLocaleString()} kr/m√•n`;
    } else if (min) {
      return `Fr√•n ${min.toLocaleString()} kr/m√•n`;
    } else if (max) {
      return `Upp till ${max.toLocaleString()} kr/m√•n`;
    }
    return 'Enligt √∂verenskommelse';
  };

  const handleQuickCategory = (category: string) => {
    setSelectedCategory(category);
    setSelectedSubcategory(''); // Clear subcategory when selecting main category
    setSearchTerm('');
  };

  return (
    <div className="max-w-7xl mx-auto space-y-8">
      {/* Hero Section */}
      <div className="text-center space-y-4 py-8">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent">
          Hitta ditt dr√∂mjobb
        </h1>
        <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
          Enkel, smart och snabb jobbs√∂kning. V√§lj kategori eller s√∂k fritt - vi hj√§lper dig hitta r√§tt.
        </p>
      </div>

      {/* Smart Category Grid */}
      <Card className="border-0 shadow-lg bg-gradient-to-br from-background to-muted/30">
        <CardHeader className="text-center pb-6">
          <CardTitle className="text-2xl">V√§lj yrkesomr√•de</CardTitle>
          <CardDescription className="text-lg">
            Klicka p√• ett omr√•de f√∂r att se alla lediga jobb
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {jobCategories.map((category) => (
              <DropdownMenu key={category.value}>
                <DropdownMenuTrigger asChild>
                  <Button
                    variant={selectedCategory === category.value ? "default" : "outline"}
                    size="lg"
                    className={`h-20 flex flex-col items-center gap-2 transition-all duration-200 hover:scale-105 ${
                      selectedCategory === category.value 
                        ? 'shadow-lg border-primary' 
                        : 'hover:shadow-md hover:border-primary/50'
                    }`}
                  >
                    <span className="text-2xl">{category.icon}</span>
                    <div className="flex items-center gap-1">
                      <span className="text-sm font-medium text-center leading-tight">
                        {category.label}
                      </span>
                      <ChevronDown className="h-3 w-3" />
                    </div>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-64 max-h-96 overflow-y-auto bg-popover border shadow-lg">
                  <DropdownMenuItem
                    onClick={() => handleQuickCategory(category.value)}
                    className="font-medium text-primary cursor-pointer"
                  >
                    {category.icon} Alla inom {category.label}
                  </DropdownMenuItem>
                  <Separator className="my-1" />
                  {category.subcategories.map((subcategory) => (
                    <DropdownMenuItem
                      key={subcategory}
                      onClick={() => {
                        setSelectedCategory(category.value);
                        setSelectedSubcategory(subcategory);
                        setSearchTerm('');
                      }}
                      className="text-sm cursor-pointer"
                    >
                      {subcategory}
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Advanced Search - Collapsible */}
      <Card className="border-primary/20">
        <CardHeader className="pb-4">
          <CardTitle className="flex items-center gap-2 text-lg">
            <Filter className="h-5 w-5" />
            Avancerad s√∂kning
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* General Search Term */}
            <div className="space-y-3">
              <Label htmlFor="search" className="text-base font-medium">S√∂k p√• f√∂retag eller beskrivning</Label>
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                <Input
                  id="search"
                  placeholder="T.ex. 'Volvo' eller 'hemarbete'"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-12 h-12 text-base"
                />
              </div>
            </div>

            {/* Job Title Search - NEW */}
            <div className="space-y-3">
              <Label htmlFor="jobTitleSearch" className="text-base font-medium">Specifik jobbtitel</Label>
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 h-5 w-5 text-muted-foreground" />
                <Input
                  id="jobTitleSearch"
                  placeholder="T.ex. 'Lastbilsf√∂rare' eller 'Truckf√∂rare'"
                  value={jobTitleSearch}
                  onChange={(e) => setJobTitleSearch(e.target.value)}
                  className="pl-12 h-12 text-base"
                />
              </div>
            </div>

            {/* Location - Enhanced */}
            <div className="space-y-3">
              <Label className="text-base font-medium">V√§lj plats</Label>
              <Select value={selectedLocation} onValueChange={(value) => setSelectedLocation(value === 'all-locations' ? '' : value)}>
                <SelectTrigger className="h-12">
                  <SelectValue placeholder="Alla platser i Sverige" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all-locations">üá∏üá™ Alla platser</SelectItem>
                  {locations.map((location) => (
                    <SelectItem key={location} value={location}>
                      üìç {location}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {/* Employment Type - Enhanced */}
            <div className="space-y-3">
              <Label className="text-base font-medium">Anst√§llningsform</Label>
              <Select value={selectedEmploymentType} onValueChange={(value) => setSelectedEmploymentType(value === 'all-types' ? '' : value)}>
                <SelectTrigger className="h-12">
                  <SelectValue placeholder="Alla anst√§llningsformer" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all-types">üíº Alla typer</SelectItem>
                  {employmentTypes.map((type) => (
                    <SelectItem key={type.value} value={type.value}>
                      {type.value === 'Heltid' ? 'üïò' : 
                       type.value === 'Deltid' ? 'üïê' : 
                       type.value === 'Konsult' ? 'üíª' : 
                       type.value === 'Praktik' ? 'üéì' : '‚è∞'} {type.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Search Actions */}
          <div className="flex flex-col sm:flex-row justify-between items-center gap-4 pt-4 border-t">
            <div className="flex items-center gap-4">
              <p className="text-lg font-medium">
                <span className="text-primary">{jobs.length}</span> jobb hittades
              </p>
              {(searchTerm || jobTitleSearch || selectedLocation !== 'all-locations' || selectedCategory !== 'all-categories' || selectedSubcategory || selectedEmploymentType !== 'all-types') && (
                <Badge variant="secondary" className="text-sm">
                  Filter aktiva
                </Badge>
              )}
            </div>
            <Button
              variant="outline"
              onClick={() => {
                setSearchTerm('');
                setJobTitleSearch('');
                setSelectedLocation('all-locations');
                setSelectedCategory('all-categories');
                setSelectedSubcategory('');
                setSelectedEmploymentType('all-types');
              }}
              className="flex items-center gap-2"
            >
              <X className="h-4 w-4" />
              Rensa alla filter
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Results Section */}
      <div className="space-y-6">
        {loading ? (
          <div className="text-center py-16">
            <div className="inline-flex items-center gap-3">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
              <p className="text-lg text-muted-foreground">S√∂ker bland tusentals jobb...</p>
            </div>
          </div>
        ) : jobs.length === 0 ? (
          <Card className="text-center py-16">
            <CardContent>
              <div className="space-y-4">
                <div className="text-6xl">üîç</div>
                <h3 className="text-xl font-semibold">Inga jobb hittades</h3>
                <p className="text-muted-foreground max-w-md mx-auto">
                  Inga jobb matchade dina s√∂kkriterier. Prova att √§ndra dina filter eller s√∂kord.
                </p>
                <Button 
                  variant="outline"
                  onClick={() => {
                    setSearchTerm('');
                    setJobTitleSearch('');
                    setSelectedLocation('all-locations');
                    setSelectedCategory('all-categories');
                    setSelectedSubcategory('');
                    setSelectedEmploymentType('all-types');
                  }}
                >
                  Visa alla jobb
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <>
            {/* Results Header */}
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">
                {selectedCategory !== 'all-categories' 
                  ? `${jobCategories.find(cat => cat.value === selectedCategory)?.label} Jobb`
                  : 'Alla Jobb'
                }
              </h2>
              <Select value="newest" onValueChange={() => {}}>
                <SelectTrigger className="w-48">
                  <SelectValue placeholder="Sortera efter" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">Senast publicerade</SelectItem>
                  <SelectItem value="relevant">Mest relevanta</SelectItem>
                  <SelectItem value="salary">H√∂gsta l√∂nen</SelectItem>
                </SelectContent>
              </Select>
            </div>
            {/* Job Cards */}
            <div className="grid gap-6">
              {jobs.map((job) => (
                <Card key={job.id} className="group hover:shadow-xl transition-all duration-300 border-l-4 border-l-transparent hover:border-l-primary">
                  <CardContent className="p-8">
                    <div className="flex justify-between items-start">
                      <div className="flex-1 space-y-4">
                        {/* Job Header */}
                        <div className="flex items-start justify-between">
                          <div className="space-y-2">
                            <h3 className="text-2xl font-bold group-hover:text-primary transition-colors">
                              {job.title}
                            </h3>
                            <div className="flex flex-wrap items-center gap-4 text-muted-foreground">
                              <div className="flex items-center gap-2 font-medium">
                                <Building className="h-5 w-5" />
                                {job.company_name}
                              </div>
                              <div className="flex items-center gap-2">
                                <MapPin className="h-5 w-5" />
                                {job.location}
                              </div>
                              <div className="flex items-center gap-2">
                                <Clock className="h-5 w-5" />
                                {job.employment_type}
                              </div>
                            </div>
                          </div>
                          
                          {/* Category Badge */}
                          {selectedCategory !== 'all-categories' && (
                            <Badge className="bg-primary/10 text-primary border-primary/20">
                              {jobCategories.find(cat => cat.value === selectedCategory)?.icon} {' '}
                              {jobCategories.find(cat => cat.value === selectedCategory)?.label}
                            </Badge>
                          )}
                        </div>
                        
                        {/* Job Description */}
                        <p className="text-muted-foreground text-lg leading-relaxed">
                          {job.description.length > 200 
                            ? `${job.description.substring(0, 200)}...` 
                            : job.description
                          }
                        </p>
                        
                        {/* Job Footer */}
                        <div className="flex items-center justify-between pt-4 border-t">
                          <div className="flex items-center gap-4">
                            <Badge variant="outline" className="text-green-700 border-green-200 bg-green-50 text-base px-3 py-1">
                              üí∞ {formatSalary(job.salary_min, job.salary_max)}
                            </Badge>
                            <span className="text-sm text-muted-foreground">
                              üìÖ {new Date(job.created_at).toLocaleDateString('sv-SE', {
                                day: 'numeric',
                                month: 'long'
                              })}
                            </span>
                          </div>
                        </div>
                      </div>
                      
                      {/* Action Buttons */}
                      <div className="flex flex-col gap-3 ml-8">
                        <Button size="lg" className="px-8">
                          <ExternalLink className="h-5 w-5 mr-2" />
                          Ans√∂k nu
                        </Button>
                        <Button variant="outline" size="lg">
                          <Heart className="h-5 w-5" />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default SearchJobs;